require('mocha');
const assert = require('assert');
const PuzzleCanvas = require('../src/canvas');
const {Slot, Tab} = require('../src/puzzle');
const NullPainter = require('../src/dummy-painter');
const {flipflop} = require('../src/sequence');

describe("PuzzleCanvas", () => {
  const painter = new NullPainter();

  it("can create a single-piece puzzle", () => {
    const canvas = new PuzzleCanvas('canvas', {
      width: 800, height: 800,
      pieceSize: 100, proximity: 20,
      borderFill: 10, strokeWidth: 2,
      lineSoftness: 0.12, strokeColor: 'black',
      image: null, painter: painter
    })

    canvas.withPiece({
      structure: {right: Tab, down: Tab, left: Slot},
      data: {
        id: 'a',
        imageOffset: null,
        image: null,
        strokeColor: null,
        targetPosition: null,
        currentPosition: {x: 50, y: 50},
        color: 'red',
        label: null
      }
    });

    canvas.draw();

    assert.equal(canvas['__nullLayer__'].figures, 1);
    assert.equal(canvas['__nullLayer__'].drawn, true);

    assert.equal(!!canvas.figures[1], false);
    assert.equal(!!canvas.figures['a'], true);

    assert.equal(canvas.puzzle.pieces.length, 1);
    assert.deepEqual(canvas.puzzle.pieces[0].centralAnchor, {x: 50, y: 50});

  })

  it("can create an autogenerated puzzle", () => {
    const canvas = new PuzzleCanvas('canvas', {
      width: 800, height: 800,
      pieceSize: 100, proximity: 20,
      borderFill: 10, strokeWidth: 2,
      lineSoftness: 0.12, strokeColor: 'red',
      image: null, painter: painter
    });

    canvas.withPuzzle({
      verticalPiecesCount: 4,
      horizontalPiecesCount: 4,
      insertsGenerator: flipflop
    });
    canvas.shuffle(0.7);
    canvas.draw();

    assert.equal(canvas['__nullLayer__'].figures, 16);
    assert.equal(canvas['__nullLayer__'].drawn, true);

    assert.equal(!!canvas.figures[0], false);
    assert.equal(!!canvas.figures[1], true);
    assert.equal(!!canvas.figures[16], true);
    assert.equal(!!canvas.figures[17], false);

    assert.equal(canvas.puzzle.pieces.length, 16);
  })
});
